name: CI/CD

on: push

jobs:
  
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            lucson20/devsecops1:latest

  scan:
    name: Scan
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Docker Scout CVEs
        uses: docker/scout-action@v1.5.0
        with:
          command: cves
          image: lucson20/devsecops1:latest
          only-severities: critical,high
          ignore-base: false
          ignore-unchanged: false
          write-comment: true
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          # exit-code: true
          # exit-on: vulnerabilities
  
  test:
    name: Test
    needs: [ scan ] # Zorgt dat test alleen draait als scan geslaagd is
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: test 
        run: |
          echo "Starting container for testing..."
          docker run -d -p 80:5000 lucson20/devsecops1:latest
          sleep 10s
          echo "Testing endpoint response..."
          curl http://localhost
          docker ps -aq | xargs docker stop | xargs docker rm

  deploy:
    name: Deploy
    needs: [ test, scan ] # Belangrijk: afhankelijk maken van scan Ã©n test
    runs-on: self-hosted
    if: success()           # alleen uitvoeren als scan en test succesvol waren 
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4  

      - name: Check vulnerabilities before deploy
        run: |
              echo "Checking for HIGH/CRITICAL vulnerabilities before deploy..."
              # docker scout cves lucson20/devsecops1:latest --only-severities critical,high --exit-code --exit-on vulnerability
              echo "Deploying to Kubernetes..."
              sudo kubectl delete deployment --all              
              sudo kubectl apply -f ${{ github.workspace }}/kubernetes/deployment.yaml --force
              sudo kubectl apply -f ${{ github.workspace }}/kubernetes/nginx-service.yaml --force        

  automated-api-tests:
    name: Automated API tests using Postman CLI
    needs: [ deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.MY_API_KEY }}
      - name: Run API tests
        continue-on-error: true
        run: |
          postman collection run "45323814-30cb6873-97b8-4328-84e4-07261962962a" --integration-id "182020-${{ github.run_id }}" 
          # Lint your API using Postman CLI
          postman api lint 444d0b01-52c2-4fce-b8df-057e37547cba --integration-id 182020 
